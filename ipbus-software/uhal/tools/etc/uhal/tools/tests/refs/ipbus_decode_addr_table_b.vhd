---------------------------------------------------------------------------------
-- Address decode logic for IPbus fabric.
--
-- This file has been AUTOGENERATED from the address table - do not
-- hand edit.
--
-- We assume the synthesis tool is clever enough to recognise
-- exclusive conditions in the if statement.
---------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_addr_table_b is

-- START automatically generated VHDL (Thu Jun 15 14:36:56 2023)
  constant IPBUS_SEL_WIDTH: positive := 3;
-- END automatically generated VHDL

  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_addr_table_b(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically generated VHDL (Thu Jun 15 14:36:56 2023)
  constant N_SLV_REG1: integer := 0;
  constant N_SLV_REG2: integer := 1;
  constant N_SLV_MEM1: integer := 2;
  constant N_SLV_MEM2: integer := 3;
  constant N_SLV_SUBMODULE1: integer := 4;
  constant N_SLV_SUBMODULE2: integer := 5;
  constant N_SLAVES: integer := 6;
-- END automatically generated VHDL

end ipbus_decode_addr_table_b;

package body ipbus_decode_addr_table_b is

  function ipbus_sel_addr_table_b(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically generated VHDL (Thu Jun 15 13:09:44 2023)
    if    std_match(addr, "----------------0--0-0-------00-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_REG1, IPBUS_SEL_WIDTH)); -- reg1 / base 0x00000000 / mask 0x00009406
    elsif std_match(addr, "----------------0--0-0-------01-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_REG2, IPBUS_SEL_WIDTH)); -- reg2 / base 0x00000002 / mask 0x00009406
    elsif std_match(addr, "----------------0--1-0----------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_MEM1, IPBUS_SEL_WIDTH)); -- mem1 / base 0x00001000 / mask 0x00009400
    elsif std_match(addr, "----------------0--1-1----------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_MEM2, IPBUS_SEL_WIDTH)); -- mem2 / base 0x00001400 / mask 0x00009400
    elsif std_match(addr, "----------------1--0-0-------0--") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SUBMODULE1, IPBUS_SEL_WIDTH)); -- submodule1 / base 0x00008000 / mask 0x00009404
    elsif std_match(addr, "----------------1--0-0-------1--") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SUBMODULE2, IPBUS_SEL_WIDTH)); -- submodule2 / base 0x00008004 / mask 0x00009404
    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;
-- END automatically generated VHDL

    return sel;

  end function ipbus_sel_addr_table_b;

end ipbus_decode_addr_table_b;

---------------------------------------------------------------------------------
