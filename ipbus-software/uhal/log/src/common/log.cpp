
#include <mutex>                             // for lock_guard, mutex
#include <stdlib.h>                          // for getenv

#include "uhal/log/LogLevels.hpp"            // for BaseLogLevel, Info, Info...
#include "uhal/log/log.hpp"                  // for log
#include "uhal/log/log_inserters.quote.hpp"  // for operator<<, Quote


namespace uhal{

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

void setLogLevelFromEnvironment ( const char* aEnvVar )
{
	char * lEnvVar = getenv ( aEnvVar );
	if( !lEnvVar )
	{
		log( Warning() , "No environment variable " , Quote( aEnvVar ) , " set. Using level " , Quote( "Info" ) , " instead." );
		setLogLevelTo ( Info() );
		return;
	}

	//Just comparing the first letter of the environment variable for speed!!!
	switch ( lEnvVar[0] )
	{
		case 'f' :
		case 'F' :
			setLogLevelTo ( Fatal() );
			break;
		case 'e' :
		case 'E' :
			setLogLevelTo ( Error() );
			break;
		case 'w' :
		case 'W' :
			setLogLevelTo ( Warning() );
			break;
		case 'n' :
		case 'N' :
			setLogLevelTo ( Notice() );
			break;
		case 'i' :
		case 'I' :
			setLogLevelTo ( Info() );
			break;
		case 'd' :
		case 'D' :
			setLogLevelTo ( Debug() );
			break;
		default:
			
			log ( Warning() , "Environment varible has invalid value " , Quote( lEnvVar ) , ". Using level " , Quote ( "Info" ) , " instead." );
			setLogLevelTo ( Info() );
	}
}

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

void disableLogging()
{
	log_configuration::mLoggingIncludesFatal = false;
	log_configuration::mLoggingIncludesError = false;
	log_configuration::mLoggingIncludesWarning = false;
	log_configuration::mLoggingIncludesNotice = false;
	log_configuration::mLoggingIncludesInfo = false;
	log_configuration::mLoggingIncludesDebug = false;
}

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

std::mutex& GetLoggingMutex()
{
	return log_configuration::mMutex;
}

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

void setLogLevelTo ( const FatalLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesFatal = true;
		log_configuration::mLoggingIncludesError = false;
		log_configuration::mLoggingIncludesWarning = false;
		log_configuration::mLoggingIncludesNotice = false;
		log_configuration::mLoggingIncludesInfo = false;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
}

const bool& LoggingIncludes ( const FatalLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		return log_configuration::mLoggingIncludesFatal;
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const ErrorLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesFatal = true;
	#ifndef LOGGING_EXCLUDE_ERROR // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesError = true;
		log_configuration::mLoggingIncludesWarning = false;
		log_configuration::mLoggingIncludesNotice = false;
		log_configuration::mLoggingIncludesInfo = false;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
	#endif
}

const bool& LoggingIncludes ( const ErrorLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		return log_configuration::mLoggingIncludesError;
	#endif
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const WarningLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesFatal = true;
	#ifndef LOGGING_EXCLUDE_ERROR // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesError = true;
	#ifndef LOGGING_EXCLUDE_WARNING // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesWarning = true;
		log_configuration::mLoggingIncludesNotice = false;
		log_configuration::mLoggingIncludesInfo = false;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
	#endif
	#endif
}

const bool& LoggingIncludes ( const WarningLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		return log_configuration::mLoggingIncludesWarning;
	#endif
	#endif
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const NoticeLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesFatal = true;
	#ifndef LOGGING_EXCLUDE_ERROR // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesError = true;
	#ifndef LOGGING_EXCLUDE_WARNING // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesWarning = true;
	#ifndef LOGGING_EXCLUDE_NOTICE // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesNotice = true;
		log_configuration::mLoggingIncludesInfo = false;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
	#endif
	#endif
	#endif
}

const bool& LoggingIncludes ( const NoticeLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		return log_configuration::mLoggingIncludesNotice;
	#endif
	#endif
	#endif
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const InfoLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesFatal = true;
	#ifndef LOGGING_EXCLUDE_ERROR // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesError = true;
	#ifndef LOGGING_EXCLUDE_WARNING // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesWarning = true;
	#ifndef LOGGING_EXCLUDE_NOTICE // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesNotice = true;
	#ifndef LOGGING_EXCLUDE_INFO // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesInfo = true;
		log_configuration::mLoggingIncludesDebug = false;
	#endif
	#endif
	#endif
	#endif
	#endif
}

const bool& LoggingIncludes ( const InfoLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		return log_configuration::mLoggingIncludesInfo;
	#endif
	#endif
	#endif
	#endif
	#endif
	return log_configuration::mFalse;
}

void setLogLevelTo ( const DebugLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesFatal = true;
	#ifndef LOGGING_EXCLUDE_ERROR // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesError = true;
	#ifndef LOGGING_EXCLUDE_WARNING // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesWarning = true;
	#ifndef LOGGING_EXCLUDE_NOTICE // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesNotice = true;
	#ifndef LOGGING_EXCLUDE_INFO // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesInfo = true;
	#ifndef LOGGING_EXCLUDE_DEBUG // A waste of time to change any level below this if it is going to disabled by compile-time checking anyway... 
		log_configuration::mLoggingIncludesDebug = true;
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

const bool& LoggingIncludes ( const DebugLevel& )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		return log_configuration::mLoggingIncludesDebug;
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
	return log_configuration::mFalse;
}

bool log_configuration::mLoggingIncludesFatal = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesError = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesWarning = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesNotice = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesInfo = true; // No #ifdefs required here since they are implemented in all the access functions.
bool log_configuration::mLoggingIncludesDebug = false; // No #ifdefs required here since they are implemented in all the access functions.

const bool log_configuration::mTrue = true;
const bool log_configuration::mFalse = false;

std::mutex log_configuration::mMutex;

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

}

